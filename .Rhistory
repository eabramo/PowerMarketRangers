# simulate ten thousand trip times.  You may need to read the help
# pages for `rnorm()` and `runif()`.  Assign the answer (a numeric
# vector of length 10000) to an object named `q3a`.
# Question 3b.  Produce a well-labeled histogram of these simulated
# trip times.
# Question 3c.  Calculate the proportion of these simulated trips
# that are greater than 60 minutes.  Assign this proportion (it is
# a single number calculated using some R code) to an object `q3c`.
#'
#' \vspace*{1cm}
#'
#' __Question 4.__  To introduce this problem, I give you a basic
#' loop with a conditional check and a little trivial math with answers
#' saved to a vector.  The curly-braces `{` `}` are optional
#' when the enclosed code is a single command.
ans <- rep(0, 10)
ans
for (i in 1:length(ans)) {
if ( (i > 3) && (i <= 6) ) {
cat("We're in the middle!  The value is i is", i, "\n")
} else cat("At the beginning or end.\n")
ans[i] <- i^2
}
ans
#' Repeat problem 3a, but this time use a loop (the loop will iterate
#' over the integers 1:10000).  You should get a very similar answer
q1 <- list(odd = seq(1,20,2),
dog = c("Handsome", "Dan"),
alternating = rep(c(FALSE TRUE,500) )
# Hint: after creating q1 as requested, the code
#    q1$dog
# for example would print "Handsome" "Dan" as a character
# vector of length 2.
#'
#' \vspace*{1cm}
#'
#' __Question 2.__  A random sample of "processing times" in the
#' security lines at Hartford-Bradley International Airport produces
#' the following data set:
x <- data.frame(name=c("Passenger1", "Passenger2", "Passenger3"),
line=c("TSA Precheck", "Standard", "Standard"),
time=c(1, 4, 5),
stringsAsFactors = FALSE)
#' When creating a data frame using `data.frame()`, my recommendation is
#' to use the option `stringsAsFactors = FALSE` for the same reason
#' as I recommend `as.is=TRUE` with `read.csv()`.  Trust me, just do it.
#' I'll talk about the reason at some point, I promise.
#' Calculate the mean value of
#' `time` in this toy data set in __two different ways__, one using
#' a `$` and one using the double-square-brackets.  The answer should
#' match the answer produced by the following more obscure methods,
#' but you need to do it in __two different ways__ (i.e. different
#' and preferably simpler than these two solutions):
mean(unlist(x["time"]))
mean(x["time"][[1]])
# CODE FOR QUESTION 2 GOES HERE (2 different ways):
mean(x$time)
#'
#' \vspace*{1cm}
#'
#' __Question 3.__  If you have no background at all in probability,
#' that's fine.  Work together.  Talk.  Ask Maria or Jessica for
#' help.  Obviously the goal of the course is learning about R, but
#' this sort of problem requires a little extra (and at the same time
#' speaks to the strengths of R).
#'
#' Traffic from New Haven to Bradley airport can be
#' unpredictable.  We're interested in the probability that a trip could
#' take more than one hour.  Conduct a simulation by completing the
#' following steps using vector operations (without using a loop).
# Question 3a.  Simulate ten thousand (10000) trip times with the
# following logic: Every trip usually takes 45 minutes, plus a
# random amount of time that is uniformly distributed between 0 and
# 20, plus an additional random amount of time that is normally
# distributed with mean 0 and standard deviation 1 minute.
# Use `runif()` and `rnorm()` and some manipulations in R to
# simulate ten thousand trip times.  You may need to read the help
# pages for `rnorm()` and `runif()`.  Assign the answer (a numeric
# vector of length 10000) to an object named `q3a`.
# Question 3b.  Produce a well-labeled histogram of these simulated
# trip times.
# Question 3c.  Calculate the proportion of these simulated trips
# that are greater than 60 minutes.  Assign this proportion (it is
# a single number calculated using some R code) to an object `q3c`.
#'
#' \vspace*{1cm}
#'
#' __Question 4.__  To introduce this problem, I give you a basic
#' loop with a conditional check and a little trivial math with answers
#' saved to a vector.  The curly-braces `{` `}` are optional
#' when the enclosed code is a single command.
ans <- rep(0, 10)
ans
for (i in 1:length(ans)) {
if ( (i > 3) && (i <= 6) ) {
cat("We're in the middle!  The value is i is", i, "\n")
} else cat("At the beginning or end.\n")
ans[i] <- i^2
}
ans
#' Repeat problem 3a, but this time use a loop (the loop will iterate
#' over the integers 1:10000).  You should get a very similar answer
rep(c(FALSE TRUE,500)
rep(c(FALSE TRUE),500)
rep(c(FALSE TRUE ),500)
rep(c( FALSE TRUE ),500)
rep(c(FALSE,TRUE),500)
q1$alternating
q1 <- list(odd = seq(1,20,2),
dog = c("Handsome", "Dan"),
alternating = rep(c(FALSE,TRUE),500) )
q1$alternating
x <- data.frame(name=c("Passenger1", "Passenger2", "Passenger3"),
line=c("TSA Precheck", "Standard", "Standard"),
time=c(1, 4, 5),
stringsAsFactors = FALSE)
mean(x$time)
mean(x[[2]])
mean(x[3,[[1]]])
mean(x[3,])
mean(x[x,3,])
mean(x[["time"]])
mean(x[[3]])
45 + runif(10000, min = 0, max = 20) + rnorm(10000, mean = 0, sd =1)
summary(q3a)
q3a <- 45 + runif(10000, min = 0, max = 20) + rnorm(10000, mean = 0, sd =1)
dim(q3a)
str(q3a)
hist(q3a)
hist(q3a, main = "Travel Times to Bradley Airport", col = "lightblue")
hist(q3a, main = "Travel Times to Bradley Airport", ylab = "Number of Trips", xlab = "Time", col = "lightblue")
q3a>60
length(q3a>60)
legnth(q3a[q3a>60])
length(q3a[q3a>60])
q3c <- (length(q3a[q3a>60]))/10000
ans <- rep(0, 10)
for (i in 1:length(ans)) {
if ( (i > 3) && (i <= 6) ) {
cat("We're in the middle!  The value is i is", i, "\n")
} else cat("At the beginning or end.\n")
ans[i] <- i^2
}
ans
q4 <- c(1:10000)
for (i in 1:length(q4)) {
45 + runif(10000, min = 0, max = 20) + rnorm(10000, mean = 0, sd =1)
}
for (i in 1:length(q4)) {
(45 + runif(10000, min = 0, max = 20) + rnorm(10000, mean = 0, sd =1))
}
for (i in 1:10000) {
(45 + runif(10000, min = 0, max = 20) + rnorm(10000, mean = 0, sd =1))
}
for (i in 1:10000) {
(45 + runif(i, min = 0, max = 20) + rnorm(i, mean = 0, sd =1))
}
q4a <- for (i in 1:10000) {
(45 + runif(i, min = 0, max = 20) + rnorm(i, mean = 0, sd =1))
}
q4a
+ }
for (i in 1:10000) {   (45 + runif(i, min = 0, max = 20) + rnorm(i, mean = 0, sd =1)) }
q4a <- c(1:10000)
for (i in 1:10000) {   (45 + runif(i, min = 0, max = 20) + rnorm(i, mean = 0, sd =1)) q4a [i]}
q4a <- c(1:10000)
q4a[i]
for (i in 1:10000) { q4a[i] <-
(45 + runif(i, min = 0, max = 20) + rnorm(i, mean = 0, sd =1))
}
q4a
hist(q3a,
main = "Travel Time to Bradley Airport",
ylab = "Number of Trips",
xlab = "Time",
col = "lightblue")
hist(q3a,
main = "Travel Time to Bradley Airport",
ylab = "Number of Trips",
xlab = "Time (minutes)",
col = "lightblue")
x <- iris   # Another built-in data set
(x[x$Species == "setosa" & x$Petal.Length <= 1.2, 3:4])
(x[x$Species == "versicolor" & x$Sepal.Length > 6])
head(x)
(x[x$Species == "versicolor" & x$Sepal.Length >6])
x
x[x$Species == "versicolor"]
(x[x$Species == "versicolor" & x$Sepal.Length >6, 5])
quiz <- (x[x$Species == "versicolor" & x$Sepal.Length >6, 5])
table (quiz)
f <- function(x, trim = 1, na.rm = FALSE) {
if (na.rm) {
x <- x[!is.na(x)] #if true
} else if (any(is.na(x))) return(NA) #if false - gets rid of all missing values. its a check
x <- sort(x)
x <- x[-c(1:trim)]
x <- sort(x, decreasing = TRUE)
return(mean(x[-c(1:trim)]))
}
ls()
mean(c(1,2,3,4,99))
f(c(1,2,3,4,99))
f(c(1,2,3,4,NA))
f(c(1,2,3,4,NA), na.rm=TRUE)
f(c(6,7))
f(c(NA, NA, NA, 1))
f(c(3))
f(c(1,1,1,1,1,1,1))
f(c(NA, NA, NA, 1),na.rm=TRUE)
f(c(NA,NA, NA, 1,2,3,) na.rm=TRUE)
f(c(NA,NA, NA, 1,2,3), na.rm=TRUE)
f(c(-1,-2,-3), trim = -1)
f(c(-1,-2,-3), trim = 2)
f(c(-1,-2,-3)
f(c(-1,-2,-3)
f(c(-1,-2,-3))
f(c(-1,-2,-3))
f(c(-1,-2,-3,4,5), trim = 2)
f(c(-1,-2,-3,NA,NA), trim = 2)
f(c(-1,-2,-3,NA,NA), trim = 2, na.rm=TRUE)
f(c(-1,-2,-3,NA,NA), na.rm=TRUE)
f(c(-1,-2,-3,NA,NA), trim = 0, na.rm=TRUE)
f(c("Ellen","thriving"))
f(c(TRUE, FALSE, TRUE))
f(c(TRUE, FALSE, TRUE, FALSE))
f(c(TRUE, TRUE, TRUE))
f(c(TRUE, TRUE, 3, 5))
f(c(1:10), trim = "Hello")
f <- function(x, trim = 1, na.rm = FALSE) {
if(!is.numeric(x)) stop("x is not numeric. Try again") #check
if (na.rm) {
x <- x[!is.na(x)] #if true
} else if (any(is.na(x))) return(NA) #if false - gets rid of all missing values. its a check
x <- sort(x)
x <- x[-c(1:trim)]
x <- sort(x, decreasing = TRUE)
return(mean(x[-c(1:trim)]))
}
f(c("grove", 2,3))
f(c(NA, 2,3))
y <- C(1:60)
y <- c(1:60)
substr(y[minval = 12])
substr(y,minval=12, maxval = 50)
substr(y,12, 50)
y
substr(y,12,50)
substr(y[12,50])
y[-c(minval:60)]
minval == 12
min(y)
minval <- 12
y[-c(minval:60)]
y[c(minval:60)]
}
g <- function(x, minval, maxval) {
if(!is.numeric(x)) stop ("abandon ship!")
minval <- 12
maxval <- 50
x <- sort(x)
x <- x[-c(minval:60)]
x <- x[-c(1:maxval)]
x <- sort(x, decreasing = true)
return (mean(x))
}
g(c(1:60))
g(c(1:60))
g <- function(x, minval, maxval) {
if(!is.numeric(x)) stop ("abandon ship!")
minval <- 12
maxval <- 50
x <- sort(x)
x <- x[-c(minval:max(x))]
x <- x[-c(min(x):maxval)]
return (mean(x))
}
g(c(1:60))
mean(c(13:50))
mean(c(1:13))
g(c(1:13))
g <- function(x, trunc(x)) {
if(!is.numeric(x)) stop ("abandon ship!")
minval <- 12
maxval <- 50
x <- sort(x)
x <- x[-c(minval:max(x))]
x <- x[-c(min(x):maxval)]
return (mean(x))
}
g(c(1:60))
for (i in 1:100){
for (j in 1:Nsim){
b <- sample(1:365, j, replace=TRUE)
temp <- table(table(b))
ans[i] <- any(as.numeric(names(temp))>=3)
prob3 <- ans[i]/Nsim}
j <- min(prob3 >= 0.5)
}
N <- 100
Nsim <-10000
ans <- rep(0, Nsim)
for (i in 1:100){
for (j in 1:Nsim){
b <- sample(1:365, j, replace=TRUE)
temp <- table(table(b))
ans[i] <- any(as.numeric(names(temp))>=3)
prob3 <- ans[i]/Nsim}
j <- min(prob3 >= 0.5)
}
for (i in 1:100){     #iterating for room size
for (j in 1:Nsim){    #iterating for triples
b <- sample(1:365, i, replace=TRUE)
temp <- table(table(b))
ans[j] <- any(as.numeric(names(temp))>=3)
} #count every time and then divide by 1000
prob3[i] <- sum(ans)/Nsim
}
N <- 100
Nsim <-10
ans <- rep(0, Nsim)
prob3 <- rep(0,100)
for (i in 80:90){     #iterating for room size
for (j in 1:Nsim){    #iterating for triples
b <- sample(1:365, i, replace=TRUE)
temp <- table(table(b))
ans[j] <- any(as.numeric(names(temp))>=3)
} #count every time and then divide by 1000
prob3[i] <- sum(ans)/Nsim
}
R <- min(prob3 >= 0.5)
R
prob3[i]
table(ans[j])
ans[j] <- any(as.numeric(names(temp))>=3)
ans[j]
set.seed(2)
N <- 100
Nsim <-40
ans <- rep(0, Nsim)
prob3 <- rep(0,100)
for (i in 70:100){     #iterating for room size
for (j in 1:Nsim){    #iterating for triples
b <- sample(1:365, i, replace=TRUE)
temp <- table(table(b))
ans[j] <- any(as.numeric(names(temp))>=3)
} #count every time and then divide by 1000
prob3[i] <- sum(ans)/Nsim
}
R <- min(prob3 >= 0.5)
R
b <- sample(1:365, i, replace=TRUE)
b
temp <- table(table(b))
temp
ans[j] <- any(as.numeric(names(temp))>=3)
ans[j]
prob3[i] <- sum(ans)/Nsim
prob3[i]
R <- min(prob3 >= 0.5)
R
for (i in 70:100){     #iterating for room size
for (j in 1:Nsim){    #iterating for triples
b <- sample(1:365, i, replace=TRUE)
temp <- table(table(b))
ans[j] <- any(as.numeric(names(temp))>=3)
} #count every time and then divide by 1000
prob3[i] <- sum(ans)/Nsim
}
if (prob >= 0.5) return [i]
if (prob3 >= 0.5) return [i]
k <- min(prob3 >= 0.5)
k
(prob3 >= 0.5)
min(length(prob3 >= 0.5)))
min(length(prob3 >= 0.5))
if (prob3 >= 0.5)) return (min(length(prob3, na.rm=TRUE)))
if (prob3 >= 0.5)) return (min(length(prob3, na.rm=TRUE))
(min(length(prob3, na.rm=TRUE))
min(which(substring(prob3,1) >= 0.5)
if (prob3 >= 0.5)) return (min(length(prob3, na.rm=TRUE))
if (FALSE) {
#while loop or nested for loop
} # End code for Question 4
R <- min(which(substring(prob3,1) == 0.5)
if (FALSE) {
#while loop or nested for loop
} # End code for Question 4
R <- min(which(substring(prob3,1) == 0.5)
if (FALSE) {
#while loop or nested for loop
} # End code for Question 4
prob3[i] <- sum(ans)/Nsim}
R <- min(which(substring(prob3,1) == 0.5)
if (FALSE) {
#while loop or nested for loop
} # End code for Question 4
R <- min(which(substring(prob3,1) == 0.5)
if (FALSE) {
R <- min(which(substring(prob3,1) == 0.5))
R
Nsim <-1000
ans <- rep(0, Nsim)
prob3 <- rep(0,100)
prob3[i] <- sum(ans)/Nsim}
for (i in 70:100){     #iterating for room size
for (j in 1:Nsim){    #iterating for triples
b <- sample(1:365, i, replace=TRUE)
temp <- table(table(b))
ans[j] <- any(as.numeric(names(temp))>=3)
} #count every time and then divide by 1000
prob3[i] <- sum(ans)/Nsim
}
R <- min(which(substring(prob3,1) == 0.5))
prob3
substring(prob3,1) == 0.5
substring(prob3,1) >= 0.5
which(substring(prob3,1) >= 0.5)
R <- which(substring(prob3,1) >= 0.5)
R
min(R)
N <- 100
Nsim <-1000
ans <- rep(0, Nsim)
prob3 <- rep(0,100)
for (i in 70:100){     #iterating for room size
for (j in 1:Nsim){    #iterating for triples
b <- sample(1:365, i, replace=TRUE)
temp <- table(table(b))
ans[j] <- any(as.numeric(names(temp))>=3)
} #count every time and then divide by 1000
prob3[i] <- sum(ans)/Nsim
}
R <- (which(substring(prob3,1) >= 0.5))
MinPeople <- min(R)
MinPeople
for (i in 1:10) cat("This number is", i, "\n")
for (n in c("Jay", "Maria", "Jessica")) print(n)
for (func in c(mean, max, min)) print(func(1:10))
1:10 %in% 5:6
other <- tapply(iris$Sepal.Length, iris$Species, mean)
mytrunc <- function(x, minval, maxval) {
if (!is.numeric(x)) stop("x must be numeric!")
x[which(x<minval)] <- minval
x[which(x>maxval)] <- maxval
return(x)
}
install.packages("~/Downloads/lubridate_1.5.6.tgz", repos = NULL, type = .Platform$pkgType)
library(lubridate)
wind$PTime <- substr(pb.date, 1,16)
wind$PTime <- substr(is.date, 1,16)
wind <- read.csv ('cleanwind.csv')
ggplot(test, aes(date, houravglmp)) +
geom_line(aes(color = node_id)) +
facet_wrap(~node_id)
v <- read.csv('combinedloadlmpdata.csv')
setwd("~/Box Sync/Yale/2017 Fall/Independent Study/Analysis Data")
x <- read.csv('hourly_lmp_load_weather_gen_pct.csv')
library("ggplot2")
library("reshape2")
library("ggthemes")
library("dplyr")
library("lubridate")
ggplot(x, aes(date, houravglmp)) +
geom_line(aes(color = node_id)) +
facet_wrap(~node_id)
x %>%
group_by(node_id, hour)
summarize(var = var(houravglmp))
group_by(node_id, hour)
summarize(var = var(x$houravglmp))
library("dplyr")
x %>%
group_by(node_id, hour)
summarize(var = var(x$houravglmp))
x %>%
group_by(x$node_id, x$hour)
summarize(var = var(x$houravglmp))
lm1 <- lm(houravglmp ~ ., data = lm.df)
lm1.stepwise <- stepAIC(lm1)
lm1 <- lm(houravglmp ~ ., data = lm.df)
lm.df <- dplyr::select(x, -ba_name, -freq, -market, -PTime, -date, -n, -X, -timestamp, -time, -Wind.Chill..F. ,-lmp) %>%
na.omit()
lm1 <- lm(houravglmp ~ ., data = lm.df)
summary (lm1)
ggplot(x, aes(date, houravglmp)) +
geom_line(aes(color = node_id)) +
facet_wrap(~month)
ggplot(x, aes(houravglmp, pct_solar)) +
geom_line(aes(color = node_id)) +
facet_wrap(~node_id)
ggplot(x, aes(houravglmp, pct_solar)) +
geom_line(aes(color = node_id)) +
facet_wrap(~month)
ggplot(x, aes(houravglmp, pct_solar)) +
geom_line(aes(color = node_id)) +
facet_wrap(~hour)
ggplot(x, aes(pct_solar, houravglmp)) +
geom_line(aes(color = node_id)) +
facet_wrap(~hour)
ggplot(x, aes(pct_wind, houravglmp)) +
geom_line(aes(color = node_id)) +
facet_wrap(~hour)
ggplot(x, aes(pct_wind+pct_solar, houravglmp)) +
geom_line(aes(color = node_id)) +
facet_wrap(~hour)
ggplot(x, aes(pct_rt, houravglmp)) +
geom_line(aes(color = node_id)) +
facet_wrap(~hour)
intrxn8 <- interaction.plot(x$node_id, x$pct_solar+x$pct_wind, x$houravglmp)
intrxn9 <- interaction.plot(x$node_id, x$pct_rt, x$houravglmp)
box14 <- boxplot(houravglmp ~ pct_solar, data=x, main="boxplot14 hourlyavg lmp by percent solar,")
